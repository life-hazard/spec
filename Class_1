#10. Write a program that rotates the elements of a list so that the element at the first index moves to the second index, the element in the second index moves to the third index, etc., and the element in the last index moves to the first index.

#11. Using a for loop, create the list below, which consists of ones separated by increasingly many zeroes. The last two ones in the list should be separated by ten zeroes. [1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,....]

#12. Write a program that generates 100 random integers that are either 0 or 1. Then find the longest run of zeros, the largest number of zeros in a row. For instance, the longest run of zeros in [1,0,1,1,0,0,0,0,1,0,0] is 4.

#13. Write a program that removes any repeated items from a list so that each item appears at most once. For instance, the list [1,1,2,3,4,3,0,0] would become [1,2,3,4,0] .

#14. Write a program that asks the user to enter a length in feet. The program should then give the user the option to convert from feet into inches, yards, miles, millimeters, centimeters, meters, or kilometers. Say if the user enters a 1 , then the program converts to inches, if they enter a 2 , then the program converts to yards, etc. While this can be done with if statements, it is much shorter with lists and it is also easier to add new conversions if you use lists.

#15. There is a provably unbreakable cipher called a one-time pad. The way it works is you shift each character of the message by a random amount between 1 and 26 characters, wrapping around the alphabet if necessary. For instance, if the current character is y and the shift is 5, then the new character is d. Each character gets its own shift, so there needs to be as many random shifts as there are characters in the message. As an example, suppose the user enters secret. The program should generate a random shift between 1 and 26 for each character. Suppose the randomly generated shifts are 1, 3, 2, 10, 8, and 2. The encrypted message wouldbe thebmv.
    # (a) Write a program that asks the user for a message and encrypts the message using the one-time pad. First convert the string to lowercase. Any spaces and punctuation in the string should be left unchanged. For example, Secret!!! becomes thebmv!!! using the shifts above.
    #(b) Write a program to decrypt a string encrypted as above. The reason it is called a one-time-pad is that the list of random shifts should only be used once. It becomes easily breakable if the same random shifts are used for more than one message. Moreover, it is only provably unbreakable if the random numbers are truly random, and the numbers generated by randint are not truly random. For this problem, just use randint , but for cryptographically safe random numbers, see Section 22.8.Chapter 8
import random

def ten():
    unrotated = [1, 2, 5, 5, 5]
    rotated = []
    for i in reversed(unrotated):
        rotated.append(i)
    print(rotated)

def eleven():
    list_a = []
    for i in range(11):
        list_a.append(1)
        for j in range(i):
            list_a.append(0)
    list_a.append(1)
    print(list_a)

def twelve():
    list_a = []
    counter = 0
    counter_list = []
    for i in range(100):
        list_a.append(random.randint(0, 1))
        if list_a[i] == 0:
            counter += 1
            counter_list.append(counter)
        if list_a[i] == 1 and i < (100 - counter):
            counter = 0
    #print(list_a)
    print("Couter:", max(counter_list))

ten()
eleven()
twelve()
